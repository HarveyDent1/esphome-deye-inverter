sensor:
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "DC Temperature"
    register_type: holding
    address: 540
    unit_of_measurement: "°C"
    device_class: temperature
    accuracy_decimals: 1
    disabled_by_default: true
    value_type: S_WORD
    filters:
      - offset: -1000
      - multiply: 0.1
    icon: "mdi:thermometer"

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "AC Temperature"
    register_type: holding
    address: 541
    unit_of_measurement: "°C"
    device_class: temperature
    accuracy_decimals: 1
    value_type: S_WORD
    filters:
      - offset: -1000
      - multiply: 0.1
    icon: "mdi:thermometer"

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output Frequency"
    register_type: holding
    address: 638
    unit_of_measurement: "Hz"
    device_class: frequency
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    value_type: U_WORD
    icon: "mdi:sine-wave"

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L1 Current"
    register_type: holding
    address: 630
    unit_of_measurement: "A"
    device_class: current
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    value_type: S_WORD
    icon: "mdi:current-ac"

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L2 Current"
    register_type: holding
    address: 631
    unit_of_measurement: "A"
    device_class: current
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    value_type: S_WORD
    icon: "mdi:current-ac"

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L3 Current"
    register_type: holding
    address: 632
    unit_of_measurement: "A"
    device_class: current
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    value_type: S_WORD
    icon: "mdi:current-ac"

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L1 Power Low"
    id: output_l1_power_low
    register_type: holding
    address: 633
    accuracy_decimals: 0
    value_type: S_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L1 Power High"
    id: output_l1_power_high
    register_type: holding
    address: 691
    accuracy_decimals: 0
    value_type: S_WORD
    internal: true

  - platform: template
    name: "Output L1 Power"
    unit_of_measurement: "W"
    device_class: power
    accuracy_decimals: 0
    update_interval: 5s
    icon: "mdi:solar-power"
    lambda: |-
      float low_value = id(output_l1_power_low).state;
      float high_value = id(output_l1_power_high).state;

      if (isnan(low_value) || isnan(high_value)) {
        return NAN;
      }

      int32_t combined_value = ((int32_t)high_value << 16) | ((int32_t)low_value & 0xFFFF);
      return (float)combined_value;

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L2 Power Low"
    id: output_l2_power_low
    register_type: holding
    address: 634
    accuracy_decimals: 0
    value_type: S_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L2 Power High"
    id: output_l2_power_high
    register_type: holding
    address: 692
    accuracy_decimals: 0
    value_type: S_WORD
    internal: true

  - platform: template
    name: "Output L2 Power"
    unit_of_measurement: "W"
    device_class: power
    accuracy_decimals: 0
    update_interval: 5s
    icon: "mdi:solar-power"
    lambda: |-
      float low_value = id(output_l2_power_low).state;
      float high_value = id(output_l2_power_high).state;

      if (isnan(low_value) || isnan(high_value)) {
        return NAN;
      }

      int32_t combined_value = ((int32_t)high_value << 16) | ((int32_t)low_value & 0xFFFF);
      return (float)combined_value;

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L3 Power Low"
    id: output_l3_power_low
    register_type: holding
    address: 635
    accuracy_decimals: 0
    value_type: S_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L3 Power High"
    id: output_l3_power_high
    register_type: holding
    address: 693
    accuracy_decimals: 0
    value_type: S_WORD
    internal: true

  - platform: template
    name: "Output L3 Power"
    unit_of_measurement: "W"
    device_class: power
    accuracy_decimals: 0
    update_interval: 5s
    icon: "mdi:solar-power"
    lambda: |-
      float low_value = id(output_l3_power_low).state;
      float high_value = id(output_l3_power_high).state;

      if (isnan(low_value) || isnan(high_value)) {
        return NAN;
      }

      int32_t combined_value = ((int32_t)high_value << 16) | ((int32_t)low_value & 0xFFFF);
      return (float)combined_value;

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output Power Low"
    id: output_power_low
    register_type: holding
    address: 636
    accuracy_decimals: 0
    value_type: S_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output Power High"
    id: output_power_high
    register_type: holding
    address: 694
    accuracy_decimals: 0
    value_type: S_WORD
    internal: true

  - platform: template
    name: "Output Power"
    unit_of_measurement: "W"
    device_class: power
    accuracy_decimals: 0
    update_interval: 5s
    icon: "mdi:solar-power"
    lambda: |-
      float low_value = id(output_power_low).state;
      float high_value = id(output_power_high).state;

      if (isnan(low_value) || isnan(high_value)) {
        return NAN;
      }

      int32_t combined_value = ((int32_t)high_value << 16) | ((int32_t)low_value & 0xFFFF);
      return (float)combined_value;

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L1 Voltage"
    register_type: holding
    address: 627
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    value_type: U_WORD
    icon: "mdi:sine-wave"

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L2 Voltage"
    register_type: holding
    address: 628
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    value_type: U_WORD
    icon: "mdi:sine-wave"

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Output L3 Voltage"
    register_type: holding
    address: 629
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    value_type: U_WORD
    icon: "mdi:sine-wave"

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "AC Inverter Relay"
    register_type: holding
    address: 552
    bitmask: 0x1
    device_class: power
    icon: "mdi:toggle-switch"
